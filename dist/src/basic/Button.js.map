{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","c","_root","borderedBtn","borderWidth","props","bordered","variable","buttonDefaultBorderWidth","undefined","borderRadius","rounded","borderRadiusLarge","buttonDefaultBorderRadius","style","others","StyleSheet","flatten","compose","getInitialStyle","variables","context","theme","children","Platform","OS","PLATFORM","IOS","buttonUppercaseAndroidText","React","Children","map","child","type","Text","cloneElement","uppercase","rootProps","prepareRootProps","WEB","androidRipple","Version","setRoot","activeOpacity","buttonDefaultActiveOpacity","buttonStyle","buttonFlex","full","block","buttonDefaultFlex","flex","maxHeight","height","paddingTop","paddingBottom","TouchableNativeFeedback","Ripple","androidRippleColor","styles","childContainer","flexGrow","onPress","transparent","PureComponent","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","primary","success","danger","warning","info","disabled","large","small","active","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton","mapPropsToStyleNames"],"mappings":"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","file":"Button.js","sourcesContent":["/* eslint-disable new-cap */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  TouchableOpacity,\r\n  Platform,\r\n  View,\r\n  TouchableNativeFeedback,\r\n  StyleSheet\r\n} from 'react-native';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\n\r\nimport variable from '../theme/variables/platform';\r\nimport { PLATFORM } from '../theme/variables/commonColor';\r\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\r\n\r\nimport { Text } from './Text';\r\n\r\n\r\nclass Button extends React.PureComponent {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n\r\n  setRoot(c){\r\n    this._root = c;\r\n  }\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      borderedBtn: {\r\n        borderWidth: this.props.bordered\r\n          ? variable.buttonDefaultBorderWidth\r\n          : undefined,\r\n        borderRadius:\r\n          this.props.rounded && this.props.bordered\r\n            ? variable.borderRadiusLarge\r\n            : variable.buttonDefaultBorderRadius\r\n      }\r\n    };\r\n  }\r\n\r\n  prepareRootProps() {\r\n\r\n    const {style, ...others} = this.props;\r\n\r\n    return {\r\n      style: StyleSheet.flatten(StyleSheet.compose(this.getInitialStyle().borderedBtn, style)),\r\n      ...others\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\r\n      : variable;\r\n\r\n    const children =\r\n      Platform.OS === PLATFORM.IOS || !variables.buttonUppercaseAndroidText\r\n        ? this.props.children\r\n        : React.Children.map(this.props.children, child =>\r\n            child && child.type === Text\r\n              ? React.cloneElement(child, {\r\n                uppercase: this.props.buttonUppercaseAndroidText === false\r\n                ? false : variables.buttonUppercaseAndroidText,\r\n                ...child.props\r\n              })\r\n              : child\r\n          );\r\n\r\n    const rootProps = this.prepareRootProps();\r\n\r\n    if (\r\n      Platform.OS === PLATFORM.IOS ||\r\n      Platform.OS === PLATFORM.WEB ||\r\n      variables.androidRipple === false ||\r\n      Platform.Version < 21\r\n    ) {\r\n      return (\r\n        <TouchableOpacity\r\n          {...rootProps}\r\n          ref={this.setRoot}\r\n          activeOpacity={\r\n            this.props.activeOpacity > 0\r\n              ? this.props.activeOpacity\r\n              : variable.buttonDefaultActiveOpacity\r\n          }\r\n        >\r\n          {children}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n    if (this.props.rounded) {\r\n      const buttonStyle = { ...rootProps.style };\r\n      const buttonFlex =\r\n        this.props.full || this.props.block\r\n          ? variable.buttonDefaultFlex\r\n          : buttonStyle.flex;\r\n      return (\r\n        <View\r\n          style={[\r\n            { maxHeight: buttonStyle.height },\r\n            buttonStyle,\r\n            { paddingTop: undefined, paddingBottom: undefined }\r\n          ]}\r\n        >\r\n          <TouchableNativeFeedback\r\n            ref={this.setRoot}\r\n            background={TouchableNativeFeedback.Ripple(\r\n              this.props.androidRippleColor || variables.androidRippleColor,\r\n              true\r\n            )}\r\n            {...rootProps}\r\n          >\r\n            <View\r\n              style={[\r\n                // eslint-disable-next-line no-use-before-define\r\n                styles.childContainer,\r\n                {\r\n                  paddingTop: buttonStyle.paddingTop,\r\n                  paddingBottom: buttonStyle.paddingBottom,\r\n                  height: buttonStyle.height,\r\n                  flexGrow: buttonFlex\r\n                }\r\n              ]}\r\n            >\r\n              {children}\r\n            </View>\r\n          </TouchableNativeFeedback>\r\n        </View>\r\n      );\r\n    }\r\n    return (\r\n      <TouchableNativeFeedback\r\n        ref={this.setRoot}\r\n        onPress={this.props.onPress}\r\n        background={\r\n          this.props.transparent\r\n            ? TouchableNativeFeedback.Ripple('transparent')\r\n            : TouchableNativeFeedback.Ripple(\r\n                variables.androidRippleColor,\r\n                false\r\n              )\r\n        }\r\n        {...rootProps}\r\n      >\r\n        <View {...rootProps}>{children}</View>\r\n      </TouchableNativeFeedback>\r\n    );\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  block: PropTypes.bool,\r\n  primary: PropTypes.bool,\r\n  transparent: PropTypes.bool,\r\n  success: PropTypes.bool,\r\n  danger: PropTypes.bool,\r\n  warning: PropTypes.bool,\r\n  info: PropTypes.bool,\r\n  bordered: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  rounded: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n  small: PropTypes.bool,\r\n  active: PropTypes.bool\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  childContainer: {\r\n    flexShrink: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nconst StyledButton = connectStyle(\r\n  'NativeBase.Button',\r\n  {},\r\n  mapPropsToStyleNames\r\n)(Button);\r\nexport { StyledButton as Button };"]}