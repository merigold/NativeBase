{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","props","color","checked","checkboxType","borderColor","checkStyle","borderRadius","getBorderRadius","checkboxBgColor","backgroundColor","checkboxDefaultColor","CheckboxRadius","defaultProps","style","getInitialStyle","tickColor","context","theme","variable","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","checkboxTextShadowRadius","PLATFORM","IOS","MATERIAL","Component","contextTypes","PropTypes","object","propTypes","TouchableOpacity","oneOfType","number","array","bool","onPress","func","StyledCheckBox","mapPropsToStyleNames"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEAEA,mE,yEACA,qD,iDACA,2DACA,mD,67BAEMA,S,0SAKYC,S,CAAW,YAC6B,KAAKC,KADlC,CACjBC,KADiB,QACjBA,KADiB,CACVC,OADU,QACVA,OADU,CACDC,YADC,QACDA,YADC,CACaC,WADb,QACaA,WADb,CAEzB,MAAO,CACLC,WAAY,CACVC,aAAc,KAAKC,eAAL,CAAqBJ,YAArB,CAAmCJ,SAAnC,CADJ,CAEVK,YAAaA,aAAeH,KAAf,EAAwBF,UAAUS,eAFrC,CAGVC,gBACEP,UAAY,IAAZ,CACID,OAASF,UAAUS,eADvB,CAEIT,UAAUW,oBANN,CADP,CAAP,CAUD,C,wDAGeP,Y,CAAcJ,S,CAAW,CACvC,GAAII,eAAiB,SAArB,CAAgC,CAC9B,MAAO,GAAP,CACD,CACD,GAAIA,eAAiB,QAArB,CAA+B,CAC7B,MAAO,EAAP,CACD,CACD,MAAOJ,WAAUY,cAAjB,CACD,C,0DAEgBZ,S,CAAW,CAC1B,GAAMa,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBf,SAArB,EAAgCM,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKL,KAAlB,CAAyBY,YAAzB,CAAP,CACD,C,uCACQ,6BACwB,KAAKZ,KAD7B,CACCE,OADD,SACCA,OADD,CACUa,SADV,SACUA,SADV,CAEP,GAAMhB,WAAY,KAAKiB,OAAL,CAAaC,KAAb,CACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDlB,SADnC,CAEdmB,kBAFJ,CAGA,GAAMC,eAAgBpB,UAAUoB,aAAhC,CACA,GAAMC,UAAWrB,UAAUqB,QAA3B,CACA,MACE,+BAAC,6BAAD,WACE,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EADP,EAEM,KAAKC,gBAAL,CAAsBxB,SAAtB,CAFN,mDAIE,8BAAC,kBAAD,EACE,MAAO,CACLE,MACEC,UAAY,IAAZ,CACIa,WAAahB,UAAUyB,iBAD3B,CAEIzB,UAAUW,oBAJX,CAKLe,SAAU1B,UAAU2B,gBALf,CAMLC,WAAY5B,UAAU6B,gBANjB,CAOLC,UAAW9B,UAAU+B,qBAPhB,CAQLC,iBAAkBhC,UAAUiC,wBARvB,CADT,CAWE,KACEZ,WAAaa,sBAASC,GAAtB,EAA6Bf,gBAAkBc,sBAASE,QAAxD,CACI,eADJ,CAEI,cAdR,iDAJF,CADF,CAwBD,C,sBApEoBC,gB,EAAjBtC,Q,CACGuC,Y,CAAe,CACpBpB,MAAOqB,oBAAUC,MADG,C,CAsExBzC,SAAS0C,SAAT,aACKC,8BAAiBD,SADtB,EAEE3B,MAAOyB,oBAAUI,SAAV,CAAoB,CACzBJ,oBAAUC,MADe,CAEzBD,oBAAUK,MAFe,CAGzBL,oBAAUM,KAHe,CAApB,CAFT,CAOE1C,QAASoC,oBAAUO,IAPrB,CAQEC,QAASR,oBAAUS,IARrB,GAWA,GAAMC,gBAAiB,yCACrB,qBADqB,CAErB,EAFqB,CAGrBC,8BAHqB,EAIrBnD,QAJqB,CAAvB,C,QAM2BA,Q,CAAlBkD,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TouchableOpacity } from 'react-native';\r\nimport IconNB from 'react-native-vector-icons/Ionicons';\r\nimport { connectStyle } from 'native-base-shoutem-theme';\r\n\r\nimport mapPropsToStyleNames from '../utils/mapPropsToStyleNames';\r\nimport variable from '../theme/variables/platform';\r\nimport { PLATFORM } from '../theme/variables/commonColor';\r\nimport computeProps from '../utils/computeProps';\r\n\r\nclass CheckBox extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n\r\n  getInitialStyle(variables) {\r\n    const { color, checked, checkboxType, borderColor } = this.props;\r\n    return {\r\n      checkStyle: {\r\n        borderRadius: this.getBorderRadius(checkboxType, variables),\r\n        borderColor: borderColor || color || variables.checkboxBgColor,\r\n        backgroundColor:\r\n          checked === true\r\n            ? color || variables.checkboxBgColor\r\n            : variables.checkboxDefaultColor\r\n      }\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  getBorderRadius(checkboxType, variables) {\r\n    if (checkboxType === 'rounded') {\r\n      return 13;\r\n    }\r\n    if (checkboxType === 'square') {\r\n      return 0;\r\n    }\r\n    return variables.CheckboxRadius;\r\n  }\r\n\r\n  prepareRootProps(variables) {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle(variables).checkStyle\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n  render() {\r\n    const { checked, tickColor } = this.props;\r\n    const variables = this.context.theme\r\n      ? this.context.theme['@@shoutem.theme/themeStyle'].variables\r\n      : variable;\r\n    const platformStyle = variables.platformStyle;\r\n    const platform = variables.platform;\r\n    return (\r\n      <TouchableOpacity\r\n        ref={c => (this._root = c)}\r\n        {...this.prepareRootProps(variables)}\r\n      >\r\n        <IconNB\r\n          style={{\r\n            color:\r\n              checked === true\r\n                ? tickColor || variables.checkboxTickColor\r\n                : variables.checkboxDefaultColor,\r\n            fontSize: variables.CheckboxFontSize,\r\n            lineHeight: variables.CheckboxIconSize,\r\n            marginTop: variables.CheckboxIconMarginTop,\r\n            textShadowRadius: variables.checkboxTextShadowRadius\r\n          }}\r\n          name={\r\n            platform === PLATFORM.IOS && platformStyle !== PLATFORM.MATERIAL\r\n              ? 'ios-checkmark'\r\n              : 'md-checkmark'\r\n          }\r\n        />\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\nCheckBox.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  checked: PropTypes.bool,\r\n  onPress: PropTypes.func\r\n};\r\n\r\nconst StyledCheckBox = connectStyle(\r\n  'NativeBase.CheckBox',\r\n  {},\r\n  mapPropsToStyleNames\r\n)(CheckBox);\r\n\r\nexport { StyledCheckBox as CheckBox };\r\n"]}